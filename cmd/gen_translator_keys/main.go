package main

import (
	"encoding/json"
	"fmt"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"os"
	"sort"
	"strings"
)

func main() {
	f, err := os.ReadFile("locales/en.json")
	if err != nil {
		panic(err)
	}

	var data map[string]string
	if err = json.Unmarshal(f, &data); err != nil {
		panic(err)
	}

	var keys []string
	for k := range data {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	var b strings.Builder
	b.WriteString("// Code generated by cmd/gen_translator_keys; DO NOT EDIT.\n\n")
	b.WriteString("package translator\n\n")
	b.WriteString("type Key string\n\n")
	b.WriteString("const (\n")
	for _, k := range keys {
		constName := toGoConstName(k)
		b.WriteString(fmt.Sprintf("\t%s Key = \"%s\"\n", constName, k))
	}
	b.WriteString(")\n")

	if err = os.WriteFile("internal/translator/keys_gen.go", []byte(b.String()), 0644); err != nil {
		panic(err)
	}
}

func toGoConstName(k string) string {
	k = strings.TrimSuffix(k, "_ADM")
	k = strings.ReplaceAll(k, ".", " ")
	k = strings.ReplaceAll(k, "-", " ")
	k = strings.ReplaceAll(k, "_", " ")
	caser := cases.Title(language.English)
	words := strings.Fields(k)
	for i, word := range words {
		words[i] = caser.String(word)
	}
	return strings.Join(words, "")
}
