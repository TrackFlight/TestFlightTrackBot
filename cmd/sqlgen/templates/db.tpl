// Code generated by sqlgen. DO NOT EDIT.

package db

import (
    "context"
    "github.com/jackc/pgx/v5/pgxpool"

    "github.com/jackc/pgx/v5"
    "github.com/jackc/pgx/v5/pgconn"
    "github.com/valkey-io/valkey-go"
)

var batchMaxSize = 1000

type DBTX interface {
    Acquire(ctx context.Context) (c *pgxpool.Conn, err error)
    Begin(context.Context) (pgx.Tx, error)
	Exec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)
	Query(context.Context, string, ...interface{}) (pgx.Rows, error)
	QueryRow(context.Context, string, ...interface{}) pgx.Row
}

type DB struct {
{{- range .Queries }}
    {{ . | ToPascalCase }}Store *{{ . | ToPascalCase }}Store
{{- end }}
}

func new(db DBTX, redis valkey.Client) (*DB, error) {
    {{- if gt (len .Enums) 0 }}
    pgxTypes := []string{
        {{- range .Enums }}
        "{{.Name}}",
        "_{{.Name}}",
        {{- end }}
    }
    c, errConn := db.Acquire(context.Background())
    if errConn != nil {
        return nil, errConn
    }
    defer c.Release()
    for _, pgxType := range pgxTypes {
        loadType, err := c.Conn().LoadType(context.Background(), pgxType)
        if err != nil {
            return nil, err
        }
        c.Conn().TypeMap().RegisterType(loadType)
    }
    {{- end }}
    return &DB{
        {{- range .Queries }}
        {{ . | ToPascalCase }}Store: &{{ . | ToPascalCase }}Store{db: db, redis: redis},
        {{- end }}
    }, nil
}